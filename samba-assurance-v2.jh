/*
 * This is a microservice sanba micro-assurance app with Gateway and three microservice applications
 */


/**
 * Entities for gateway
 */

application {
  config {
    baseName gatewayManagement
    applicationType gateway
    packageName com.samba.gateway
    serviceDiscoveryType consul
    authenticationType jwt
    prodDatabaseType mysql
    messageBroker kafka
    clientFramework angularX
    serverPort 9000
  }
  entities Utilisateur, Authentification, MedicalDocument, Notification, Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement, Sinistre, DocumentDeSinistre, Reclamation, Fournisseur, MedicalRecord, PrestationSoin, FinanceurSoin
}

relationship ManyToOne {
  Souscription{utilisateur} to Utilisateur
  Sinistre{souscription} to Souscription
  Sinistre{fournisseur} to Fournisseur
  Sinistre{prestationsSoin} to PrestationSoin
  PrestationSoin{financeurSoin} to FinanceurSoin
  Paiement{souscription} to Souscription
  PolicesAssurances{assurance} to Assurance
  DocumentDeSinistre{sinistre} to Sinistre
  Reclamation{sinistre} to Sinistre
  Souscription{policesAssurances} to PolicesAssurances
  Rapport{assurance} to Assurance
  Notification{utilisateur} to Utilisateur
  MedicalRecord{utilisateur} to Utilisateur
  MedicalDocument{dossierMedical} to MedicalRecord
}

relationship ManyToMany {
  Assurance{garantie} to Garantie
  PrestationSoin{financeurSoin} to FinanceurSoin
}

relationship OneToOne {
  Utilisateur{authentification} to Authentification
}

paginate Utilisateur, Authentification, MedicalDocument, Notification, Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement, Sinistre, DocumentDeSinistre, MedicalRecord, Fournisseur, Reclamation, PrestationSoin, FinanceurSoin with infinite-scroll
service Utilisateur, Authentification, MedicalDocument, Notification, Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement, Sinistre, DocumentDeSinistre, MedicalRecord, Fournisseur, Reclamation, PrestationSoin, FinanceurSoin with serviceImpl
dto Utilisateur, Authentification, MedicalDocument, Notification, Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement, Sinistre, DocumentDeSinistre, MedicalRecord, Fournisseur, Reclamation, PrestationSoin, FinanceurSoin with mapstruct
search Utilisateur, Authentification, MedicalDocument, Notification, Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement, Sinistre, DocumentDeSinistre, MedicalRecord, Fournisseur, Reclamation, PrestationSoin, FinanceurSoin with elasticsearch
microservice Utilisateur, Authentification, MedicalDocument, Notification, Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement, Sinistre, DocumentDeSinistre, MedicalRecord, Fournisseur, Reclamation, PrestationSoin, FinanceurSoin with gatewayManagement


/**
 * Entities for user management microservice
 */

application {
  config {
    baseName userManagement
    applicationType microservice
    packageName com.samba.user
    serviceDiscoveryType consul
    authenticationType jwt
    prodDatabaseType postgresql
    messageBroker kafka
    serverPort 9001
  }
  entities Utilisateur, Authentification, Notification, MedicalDocument, MedicalRecord
}

entity Utilisateur {
  numNiu String required
  nom String required
  prenom String required
  email String required unique pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  motDePasse String required
  dateNaissance Instant required
  numCni String required
  sexe Gender required
  telephone String required
  addresse String required
  ville String required
  pays String required
  role Role required
  signature Blob required
}
enum Role {
  CLIENT,
  AGENT,
  ADMINISTRATEUR
}
enum Gender {
    MALE,
    FEMALE,
    OTHER
}

entity MedicalRecord {
  recordId String required unique
  details String required
  dateUpdated Instant required
}

entity MedicalDocument {
  nom String required
  type String required
  url String required
}

entity Notification {
  message String required
  dateEnvoi Instant required
  type NotificationType required
}
enum NotificationType {
  PAIEMENT,
  RENOUVELLEMENT,
  SINISTRE
}

entity Authentification {
  dateConnexion Instant required
  ipAdresse String required
}

relationship ManyToOne {
  Notification{utilisateur} to Utilisateur
  MedicalRecord{utilisateur} to Utilisateur
  MedicalDocument{dossierMedical} to MedicalRecord
}

relationship OneToOne {
  Utilisateur{authentification} to Authentification
}

paginate Utilisateur, Authentification, MedicalDocument, Notification, MedicalRecord with infinite-scroll
service Utilisateur, Authentification, MedicalDocument, Notification, MedicalRecord with serviceImpl
dto Utilisateur, Authentification, MedicalDocument, Notification, MedicalRecord with mapstruct
search Utilisateur, Authentification, MedicalDocument, Notification, MedicalRecord with elasticsearch
microservice Utilisateur, Authentification, MedicalDocument, Notification, MedicalRecord with userManagement


/**
 * Entities for insurance management microservice
 */

application {
  config {
    baseName insuranceManagement
    applicationType microservice
    packageName com.samba.insurance
    serviceDiscoveryType consul
    authenticationType jwt
    prodDatabaseType postgresql
    messageBroker kafka
    serverPort 9002
  }
  entities Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement
}

entity Assurance {
  nom String required
  description String
  conditions String
  type InsuranceType required
  prixAssurance BigDecimal required
  dateDebut Instant required
  dateFin Instant required
}
enum InsuranceType {
  PERSONNE,
  BIEN,
  AGRICOLE
}

entity Garantie {
  description String required
  dateDebut Instant required
  dateFin Instant required
  status GarantieStatus required
}
enum GarantieStatus {
  ACTIVE,
  EXPIREE,
  SUSPENDUE
}

entity Rapport {
  titre String required
  description String
  type RapportType required
  dateGeneration Instant required
  url String required
}
enum RapportType {
  PERFORMANCE,
  PAIEMENT,
  SINISTRE
}

entity PolicesAssurances {
  numeroPolice String required unique
  dateEmission Instant required
  dateExpiration Instant required
  description String
  montantAssure BigDecimal required
  plafondAssure BigDecimal required
}

entity Souscription {
  numeroSouscription String required unique
  dateSouscription Instant required
  status SubscriptionStatus required
  cumulSinistres BigDecimal required
  frequencePaiement PaymentFrequency required
}
enum SubscriptionStatus {
  ACTIVE,
  ON_RISK,
  WATTING,
  RESILIE
}
enum PaymentFrequency {
  MENSUEL,
  TRIMESTRIEL,
  SEMESTRIEL,
  ANNUEL
}

entity Paiement {
  datePaiement Instant required
  montant BigDecimal required
  type PaymentType required
  status PaymentStatus required
}
enum PaymentType {
  PRIME,
  REMBOURSEMENT
}
enum PaymentStatus {
  PENDING,
  COMPLETED,
  FAILED
}

relationship ManyToOne {
  Rapport{assurance} to Assurance
  Paiement{souscription} to Souscription
  Souscription{policesAssurances} to PolicesAssurances
}

relationship ManyToMany {
  Assurance{garantie} to Garantie
}

paginate Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement with infinite-scroll
service Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement with serviceImpl
dto Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement with mapstruct
search Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement with elasticsearch
microservice Assurance, Garantie, Rapport, PolicesAssurances, Souscription, Paiement with insuranceManagement


/**
 * Entities for claim management microservice
 */

application {
  config {
    baseName claimManagement
    applicationType microservice
    packageName com.samba.claim
    serviceDiscoveryType consul
    authenticationType jwt
    prodDatabaseType postgresql
    messageBroker kafka
    serverPort 9003
  }
  entities Sinistre, DocumentDeSinistre, Reclamation, Fournisseur, PrestationSoin, FinanceurSoin
}

entity Sinistre {
  numeroSinistre String required unique
  dateDeclaration Instant required
  dateTraitement Instant
  status ClaimStatus required
  raison String required
  montantReclame BigDecimal required
  montantApprouve BigDecimal
}
enum ClaimStatus {
  EN_ATTENTE,
  APPROUVE,
  ANNULE
}

entity DocumentDeSinistre {
  nom String required
  type String required
  url String required
  dateTelechargement Instant required
}

entity Reclamation {
  numeroReclamation String required unique
  dateReclamation Instant required
  description String required
  status ReclamationStatus required
}
enum ReclamationStatus {
  EN_COURS,
  RESOLUE,
  REJETEE
}

entity Fournisseur {
  nom String required
  adresse String required
  telephone String required
  email String required
  servicesFournis String required
  dateDebutContrat Instant required
  dateFinContrat Instant required
}

entity PrestationSoin {
  nom String required
  description String
  type PrestationType required
  montant BigDecimal required
}
enum PrestationType {
  CONSULTATION,
  HOSPITALISATION,
  SOINS_PARAMEDICAUX,
  RADIOLOGIE,
  ANALYSES_LABORATOIRE,
  PHARMACIE,
  CHIRURGIE,
  URGENCES,
  SOINS_DENTAIRES,
  SOINS_OCULAIRES,
  MATERNITE,
  REEDUCATION,
  PSYCHOTHERAPIE,
  SOINS_A_DOMICILE,
  AMBULANCE,
  VACCINATION,
  TELEMEDECINE,
  NUTRITION,
  PHYSIOTHERAPIE
}

entity FinanceurSoin {
  nom String required
  type FinanceurType required
  adresse String required
  telephone String required
  email String required
  servicesFournis String required
}
enum FinanceurType {
  ASSUREUR,
  MUTUELLE,
  ORGANISME_PUBLIC
}

relationship ManyToMany {
  PrestationSoin{financeurSoin} to FinanceurSoin
}

relationship ManyToOne {
  Sinistre{fournisseur} to Fournisseur
  DocumentDeSinistre{sinistre} to Sinistre
  Reclamation{sinistre} to Sinistre
  PrestationSoin{financeurSoin} to FinanceurSoin
  Sinistre{prestationsSoin} to PrestationSoin
}

paginate Sinistre, DocumentDeSinistre, Reclamation, Fournisseur, PrestationSoin, FinanceurSoin with infinite-scroll
service Sinistre, DocumentDeSinistre, Reclamation, Fournisseur, PrestationSoin, FinanceurSoin with serviceImpl
dto Sinistre, DocumentDeSinistre, Reclamation, Fournisseur, PrestationSoin, FinanceurSoin with mapstruct
search Sinistre, DocumentDeSinistre, Reclamation, Fournisseur, PrestationSoin, FinanceurSoin with elasticsearch
microservice Sinistre, DocumentDeSinistre, Reclamation, Fournisseur, PrestationSoin, FinanceurSoin with claimManagement
